------------------------------------------------------------------------------------------------------
                                              HTML中URL与 href与src的区别：**
------------------------------------------------------------------------------------------------------
   URL是一个网页地址。URL - 统一资源定位器。Web浏览器通过URL从Web服务器请求页面。

   href是Hypertext Reference的缩写，表示超文本引用。用来建立当前元素和文档之间的链接。
常用的有：link、a。
浏览器会识别所引用的文档，并下载该文档，并且不会停止对当前文档的处理。
这也是建议使用link，而不采用@import加载css的原因。
   
   src是source的缩写，src的内容是页面必不可少的一部分，是引入。
src指向的内容会嵌入到文档中当前标签所在的位置。常用的有：img、script、iframe。
当浏览器解析到该元素时，会暂停浏览器的渲染，直到该资源加载完毕。
这也是将js脚本放在底部而不是头部得原因。因为这样有利于加速界面的加载。
   
   url不是属性，src和href是属性


总结：
     src：是用于替换当前所操作的元素；（引入）
          会暂停浏览器的渲染，直到该资源加载完毕。
    href：是用于在当前页面和所引用的资源之间建立联系。（引用）
          不会停止对当前文档的处理。


------------------------------------------------------------------------------------------------------
                                html废弃标签**
------------------------------------------------------------------------------------------------------
废弃标签： 
  1.<basefont>标签定义基准字体。该标签可以为文档中的所有文本定义默认字体颜色、字体大小和字体系列
   2.<bgsound>用来添加背景音乐
   3.<big>用来放大字体，放大一号（嵌套多层可以放大更多），不支持的浏览器显示粗体
   4.<dir>目录列表
   5.<listing>
   6.<applet>
   7.<xmp>
   8.<nextid>
   9.<isindex>
   10.<rb>
-------------------------------------------------------------------------------------------
                                                 post和get的区别
--------------------------------------------------------------------------------------------
1.get是从服务器上获取数据，post是向服务器传送数据。
2.get是把参数数据队列加到提交表单action属性所指的url中，在url中可以看到，post是通过http post机制，用户看不到这个过程，
3.get传送的数据量较小，不能大于2kb。post传送数据量较大，一般被默认为不受限制。
4.get安全性非常低，post安全性较高。但是执行效率却比post方法好。
6.GET产生一个TCP数据包；POST产生两个TCP数据包
7.get参数通过url传递，post放在request body中。
8.get请求只能进行url编码，而post支持多种编码方式
9.get请求会浏览器主动cache，而post支持多种编码方式。
10.get可以缓存post不可以缓存
11.get能够添加书签post不能添加书签
12.get请求参数会被完整保留在浏览历史记录里，而post中的参数不会被保留。
--------------------------------------------------------------------------------------------
                                 xhtml与html的区别为什么写<!doctype html>**
---------------------------------------------------------------------------------------------
XHTML 元素必须被正确地嵌套。
XHTML 元素必须被关闭。
标签名必须用小写字母。
XHTML 文档必须拥有根元素。
<!doctype html>
     定义文档类型；如果没有它，浏览器在渲染页面的时候会使用怪异模式；而各个浏览器在怪异模式下
  对各个元素渲染是有差异的。
-------------------------------------------------------------------------------------------------
                                        html5新增标签
-------------------------------------------------------------------------------------------------
1.<heager>头部</header>
2.<nav>导航栏</nav>
3.<footer>尾部</footer>
-----------------------------------------------------------------------------------------------------
					前端性能优化**
-----------------------------------------------------------------------------------------------------
1、服务器优化
2、内容优化
   减少HTTP请求数
   减少DNS查找
   延迟加载组件,预加载组件
3、javascript优化
   将JavaScript脚本放在页面的底部。
   将JavaScript和CSS作为外部文件来引用
   删除重复的脚本
4、图像优化
   (1)优化图片大小
   (2)通过CSS Sprites优化图片
   (3)不要在HTML中使用缩放图片
5、CSS文档统筹
   1）整站里相同的CSS样式提取到一个样式表里，各个页面调用相同的样式文件即可。
   2）网站较大的情况下一般会把网站的头部，尾部单独分离出来，包括样式文件。
6、CSS规范
7、样式重置
8、多媒体回溯
       对页面上的媒体而言，像图片、视频、动画等，要确保其有可替代的接入接口。图片文件我们可以使用有意义的
       备选文件（alt)视频和音频我们可以为其加上字幕。
       提供可替代内容提高可用性。
---------------------------------------------------------------------------------------------------------
                                     word-wrap与word-break**
---------------------------------------------------------------------------------------------------------
word-wrap与word-break
  强制换行  空格
     word-wrap   属性用来表明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断居点时产生溢出现象
     word-break  属性用来标明怎么进行单词内的断句

     用法：word-wrap：normal|break-word；
           work-break：normal|break-all|keep-all；
     区别就是长单词在word-wrap作用下换到下一行，后面可以正常运行，word-break的作用下利用了上一行没有用完的空间
--------------------------------------------------------------------------------------------------------------
                                     省略号**
--------------------------------------------------------------------------------------------------------------
 li{
	width: 400px;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
    }
------------------------------------------------------------------------------------------------------------
 					元素垂直水平居中的方式**
----------------------------------------------------------------------------------------------------------
1.不知元素宽高时：父相子绝的基础上给子元素加  left:0;right:0;bottom:0;top:0;margin:auto;即可让子元素位于父元素中心中
2.不知元素宽高时:父元素加  display:flex;justify-content:center;（将项目【子元素】水平居中）align-iteam:center;(将项目垂直居中)
3.不知元素宽高时给子元素加transform:translate(-50%,-50%);
4.当元素知道宽高时：父相子绝的基础上给子元素加left:50%;top:50%;margin-left: -xxpx;(元素宽度一半)margin-top:-xxpx;(元素高度一半)
5.当元素知道宽高时：给子元素加transform:translate(-xxpx,-xxpx);元素宽度高度一半
6.不知元素宽高时:父相子绝的基础上给父元素加display:table-cell;（将元素转换为变革单元格）vertical-align:middle;
                               给子元素加margin：auto；
------------------------------------------------------------------------------------------------------------
 					五大浏览器内核**
----------------------------------------------------------------------------------------------------------
Trident:  IE
Gecko:    代表作Mozilla Firefox 开源
Webkit:   代表作品Safari、Chrome开源
Presto：  代表作品Opera、presto世界上公认的渲染速度最快的引擎。
Blink：   是由Google和Opera Software开发的浏览器排版引擎。
------------------------------------------------------------------------------------------------------------
 					浏览器兼容问题及解决方式7.8个**
------------------------------------------------------------------------------------------------------------
IE常见css解析bug及hack
1.图片间隙
A）div中的图片间隙（该bug出现在IE6及更低版本中）
描述：在div中插入图片时，图片会将div下方撑大三要素。
hack1：将</div>与<img>写在一行上；
hack2：将<img>转为块级元素，给<img>添加声明：display：block；
B）dt，li中图片间隙（IE6）
hack：将<img>转为块级元素，给<img>添加声明：display：block；
2）双倍浮向（双倍边框）
描述：当ie6及更底版本浏览器在解析浮动元素时会错误的把浮向边边界加倍显示
hack：给浮动元素添加声明：display：inline；
3）默认高度（IE6）
描述：在ie6及以下版本中部分块元素拥有默认高度（低于16px高度）
hack1：给元素添加声明：font-size：0；
hack2:给元素添加声明:overflow:hidden;
4)表单元素行高不一样（IE、moz、c、o、s）
简述：表单元素行高对齐方式不一致
hack：给表单元素添加声明:float：left；
5）按钮元素默认大小不一致
描述：各浏览器中按钮元素大小不一致
hack1：统一大小/（用a标记模拟）
hack2：input外边套一个标签在这个标签里写按钮的样式，把input的边框去掉（推荐）
hack3：如果这个按钮是一个图片，直接把图片作为按钮的背景图
6）浏览器解析按钮边框时，会把按钮边框解析在按钮内部，不会影响按钮的原有大小
7）百分比bug
描述在ie6及以下版本中在解析百分比时会四舍五入方式计算从而导致50%加50%大于100%的情况
hack：给右边的浮动元素添加声明：clear：right；意思：清除右浮动
注释：元素右浮的时候清除左浮动元素左浮的时候清除右浮动
8）鼠标指针bug
描述：cursor属性的hand属性值只有ie浏览器识别，其他浏览器不识别，cursor属性的pointer属性值ie6.0以上版本及其它内核浏览器都识别
hack：如统一某元素鼠标指针形状为手型，应添加声明：cursor：pointer；
扩展
cursor：crosshair十字架/pointer手型/move移动/e-resize左右方向/ne-resize向右及向上移动/nw-resize向上及向左移动/n-resize向上移动
se-resize向下及向右移动/a-resize向下移动/w-resize向左移动/text文本/wait等待状态/help帮助
9）列表阶梯bug（ie6及更低版本的浏览器中）
bug1：在给的子元素中使用了float：left；父元素中没有设置浮动属性，会出现垂直效果
hack：给父元素设置浮动便能解决此问题
bug2：当给li里的a转成块元素，且a写了浮动后并a设置了固定高度时在ie6及更低版本浏览器里会出现li阶梯效果
hack：给li也同时设置左浮即可
10）浏览器解析margin属性值时，上下边界的属性重合，左右相加。
11）在ie6及更低版本中的浏览器里，如果想去掉input的默认边框需将其border属性值设置成0方可兼容而非none；
12）bug子元素美设置任何浮动，设置了margin-top属性后，会错误的把margin-top的属性添加给父元素（块元素）
hack1：给父元素添加overflow：hidden；声明。
如果子元素设置了浮动属性也不会出现这个问题
13）li里a加display：block；（ie6以下版本浏览器）出现行高不一致；
hack：给li加float：left；（并设置li的宽度等于父元素的宽度）
14）透明属性
ie8以下浏览器写法：filter：alpha（opacity=value）：取值1-100
兼容其他浏览器写法：opacity：value；（value的取值0-1，0.1，0.2，...1）



------------------------------------------------------------------------------------------------------------
 					什么是bfc触发条件是是什么**
----------------------------------------------------------------------------------------------------------
块格式化上下文是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，
    也是浮动元素与其他元素的交互限定区域。 
BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然；

触发条件
   根元素 float属性不为none 
   position为absolute或fixed 
   display为inline-block, table-cell, table-caption, flex, inline-flex
   overflow不为visible
------------------------------------------------------------------------------------------------------------
 					清浮动的3种方式**
------------------------------------------------------------------------------------------------------------
hack1：给父元素添加声明overflow：hidden；
hack2：在浮动元素下方添加空div，并给该元素添加声明：clear:both;height:0;overflow:hidden;
hack3:万能清除浮动法:
	选择符::after{ 
		content:"";
		clear:both;
		display:block;
		height:0;
		overflow:hidden;
		visibility:hidden;
             }

------------------------------------------------------------------------------------------------------------
 					为什么h5要语义化标签优点？**
------------------------------------------------------------------------------------------------------------
让标签有含义，给某块内容用上一个最恰当最合适的标签，使页面有良好的结构，页面元素有含义，有利于搜索引擎。      
	1.  HTML结构清晰
        2.  代码可读性较好
        3.  无障碍阅读
        4.  搜索引擎可以根据标签的语言确定上下文和权重问题
        5.  移动设备能够更完美的展现网页（对css支持较弱的设备）
        6.  便于团队维护和开发









sunhui170@163.com






